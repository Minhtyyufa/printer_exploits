# This is a sample Python script.
import socket
import time
import sys
# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
PRINTER_HOST = "172.16.0.34"
PRINTER_PORT = 9100


class JobSender():

    def __init__(self, host, port):
        self.host = host
        self.port = port

    # https://www.nds.ruhr-uni-bochum.de/media/ei/arbeiten/2017/01/30/exploiting-printers.pdf
    # pjl_commands should end in a new line character.
    def make_pjl_job(self, pjl_commands):
        return pjl_commands + "@PJL ECHO DELIMITER7429\n\x1b%-12345X"

    # pcl_commands should end in a new line character.
    def make_pcl_job(self, pcl_commands):
        pcl_job = "\x1b%-12345X\n" \
                  "@PJL ENTER LANGUAGE = POSTSCRIPT\n" \
                  "%!\n" \
                  "/print {(%stdout) (w) file dup 3 2\n" \
                  "\troll whitestring flushfile} def\n" \
                  "/== {128 string cvs print} def\n" \
                  + pcl_commands + "(DELIMITER29384\n) print flush\n" \
                                   "\x1b%-12345X"


        return pcl_job

    def send_job(self, commands, job_type, suppressed_out=False):
        if not suppressed_out:
            print("Connecting to " +  self.host + ":" + str(self.port))
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((self.host, self.port))

        if job_type == "pjl":
            job = self.make_pjl_job(commands)
        else:
            job = self.make_pcl_job(commands)
        sock.sendall(job.encode())
        time.sleep(.5)

        sock.shutdown((socket.SHUT_WR))

        res = bytes()

        while True:
            data = sock.recv(1024)
            if(not data):
                break
            res += data
        if not suppressed_out:
            print("Response to response file: ")
            f = open('response', 'wb')
            f.write(res)
            f.close()
            print("Closing Connection")
        sock.close()

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print(sys.argv[1])
    f = open(sys.argv[1])

    job_sender = JobSender(PRINTER_HOST, PRINTER_PORT)
    job_sender.send_job(f.read(), "pjl", False)
    f.close()
# See PyCharm help at https://www.jetbrains.com/help/pycharm/
